// Build [version] [next_version] [dockerhub]
// Bump version to [version]
// make docker-build BUILD_TAG=:uuid
// -- Test Container BEGIN (before build train image)
// make lint
// make tests_unit
// -- Prepare for test
// AWS_REGISTRY=scripts/ecr_prepare.sh
// make docker-push DOCKER_REGISTRY=$AWS_REGISTRY BUILD_TAG=:uuid TAG=:uuid
// -- Run tests
// make tests_integration TEST_SM_ROLE=${TEST_SM_ROLE} TEST_IMAGE${TEST_IMAGE}

pipeline {
    agent { label 'ec2orchestrator' }

    parameters {
        string(defaultValue: 'odahu/sagemaker-mlflow-container', name: 'imageName', description: 'Name of result docker image')
        string(name: 'ecrRegistry', description: 'ECR Registry for SageMaker containers')
        string(name: 'ecrTestRegistry', description: 'ECR Registry for SageMaker containers ' +
                'that were used only while testing. The pushed images will be cleaned after job finish')
        string(defaultValue: 'eu-central-1', name: 'awsRegion', description: 'AWS region')
        string(name: 'awsCredentialsEnvFile', description: 'AWS credentials environment file')
        string(name: 'sagemakerRole', description: 'Sagemaker role')
    }

    environment {
        // Repository parameters
        imageName = "${params.imageName}"
        awsRegion = "${params.awsRegion}"
        awsCredentialsId = "${params.awsCredentialsEnvFile}"
        registry = "${params.ecrTestRegistry}"
        sagemakerRole = "${params.sagemakerRole}"

        testBuildTag = UUID.randomUUID().toString()
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm
            }
        }
        stage('Build test env image') {
            steps {
                script {
                    docker.build("${env.imageName}-test:${env.testBuildTag}", "-f containers/app-test-env/Dockerfile .")
                }
            }
        }
        stage('Lint code') {
            steps {
                script {
                    docker.image("${env.imageName}-test:${env.testBuildTag}").inside(){
                        sh "flake8 src/sagemaker_mlflow_container"
                        sh "flake8 tests --exclude=resources"
                        sh "pytest -s tests/unit"
                    }
                }
            }
        }
        stage('Unit tests') {
            steps {
                script {
                    docker.image("${env.imageName}-test:${env.testBuildTag}").inside(){
                        sh "pytest -s tests/unit"
                    }
                }
            }
        }
        stage('Login docker') {
            steps {
                script {
                    def testBuildTag = UUID.randomUUID().toString()
                    withCredentials([file(credentialsId: env.awsCredentialsId, variable: 'awsCredentialsId')]) {
                        sh returnStdout: true, script: """
                                               docker run --env-file ${awsCredentialsId} \
                                               amazon/aws-cli ecr get-login-password --region ${env.awsRegion}  \
                                               | docker login --username AWS --password-stdin ${env.registry}
                                                """
                    }
                }
            }
        }
        stage('Prepare container for integration testing') {
            steps {
                script {
                    env.testBuildTag = UUID.randomUUID().toString()
                    sh """ docker build -t ${env.registry}/${env.imageName}:${testBuildTag} . -f containers/app/Dockerfile && \
                           docker push ${env.registry}/${env.imageName}:${testBuildTag}
                    """
                }
            }
        }
        stage('Integration tests') {
            steps {
                script {

                    withCredentials([file(credentialsId: env.awsCredentialsId, variable: 'awsCredentialsId')]) {

                        def dockerArgs = """
                        -u root --env-file ${awsCredentialsId} -e AWS_DEFAULT_REGION=${env.awsRegion} 
                        -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp
                        -e TEST_RESOURCES="${env.WORKSPACE}/tests/integration/resources"
                         """

                        docker.image("${env.imageName}-test:${env.testBuildTag}").inside(dockerArgs) {
                            sh "pytest -s tests/integration --image ${env.registry}/${env.imageName}:${testBuildTag} --sagemaker-role ${env.sagemakerRole}"
                            sh "rm -rf tests/integration/__pycache__"
                            sh "rm -rf .pytest_cache"
                        }
                    }
                }
            }
        }

    }

    post {
        cleanup {
//            script {
//                withCredentials([file(credentialsId: env.awsCredentialsId, variable: 'awsCredentialsId')]) {
//                    sh """
//               docker run --env-file ${awsCredentialsId} \
//               amazon/aws-cli ecr batch-delete-image --region ${awsRegion} \
//               --repository-name ${env.imageName} --image-ids imageTag=${testBuildTag}
//                """
//                }
//            }
            deleteDir()
        }
    }
}
